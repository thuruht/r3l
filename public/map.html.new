<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>R3L:F - Geographic Connections</title>
  <link rel="stylesheet" href="css/rel-f-global.css">
  <link rel="stylesheet" href="vendor/leaflet/leaflet.min.css">
  <script src="js/font-loader.js" defer></script>
  <script src="vendor/leaflet/leaflet.min.js"></script>
  <style>
    .map-container {
      width: 100%;
      height: 500px;
      margin-bottom: 2rem;
      border-radius: 8px;
      overflow: hidden;
    }
    .control-panel {
      margin-bottom: 1rem;
    }
    .map-popup h4 {
      margin: 0 0 8px 0;
      color: var(--accent-color);
    }
    .map-popup p {
      margin: 0 0 4px 0;
    }
    .marker-icon {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .marker-icon svg {
      width: 18px;
      height: 18px;
      fill: var(--text-primary);
    }
    /* Compact header */
    .page-header {
      display: flex;
      align-items: center;
      margin-bottom: 1rem;
    }
    .page-header h1 {
      margin: 0;
      margin-right: 1rem;
    }
    .page-header .subtitle {
      margin: 0;
      font-size: var(--fs-lg);
      color: var(--text-secondary);
    }
    /* Loading indicator */
    .loading-indicator {
      display: none;
      text-align: center;
      padding: 20px;
      margin-bottom: 1rem;
    }
    .loading-indicator.active {
      display: block;
    }
    /* Attribution modal */
    .attribution-modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }
    .attribution-modal.hidden {
      display: none;
    }
    .modal-content {
      background-color: var(--bg-primary);
      border-radius: 8px;
      padding: 20px;
      max-width: 600px;
      width: 90%;
    }
    .close-modal {
      margin-top: 15px;
    }
    .error-message {
      padding: 20px;
      text-align: center;
      background-color: var(--bg-secondary);
      border-radius: 8px;
    }
    
    /* Add point panel styles */
    .add-point-panel {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 1000;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    
    .add-point-panel.hidden {
      display: none;
    }
    
    .add-point-container {
      background-color: var(--bg-primary);
      border-radius: 8px;
      padding: 20px;
      max-width: 500px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
    }
    
    .add-point-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .add-point-header h3 {
      margin: 0;
    }
    
    .add-point-close {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--text-secondary);
      font-size: 24px;
    }
    
    .form-row {
      margin-bottom: 15px;
    }
    
    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <!-- Navigation will be inserted by JavaScript -->
    </div>
  </header>

  <main>
    <div class="container">
      <div class="page-header">
        <h1>Geographic Map</h1>
        <p class="subtitle">Explore content with geographical connections</p>
      </div>
      
      <div class="control-panel">
        <div class="filter-container">
          <label for="data-type">Data Type:</label>
          <select id="data-type">
            <option value="all">All Types</option>
            <option value="document">Documents</option>
            <option value="image">Images</option>
            <option value="audio">Audio</option>
            <option value="video">Video</option>
            <option value="geo">Geographic Only</option>
          </select>
          
          <label for="time-range">Time Range:</label>
          <select id="time-range">
            <option value="all">All Time</option>
            <option value="recent" selected>Recent (7 days)</option>
            <option value="month">Past Month</option>
            <option value="year">Past Year</option>
          </select>
          
          <button id="refresh-map" class="btn">
            <span class="material-icons">refresh</span>
            Refresh
          </button>
          
          <button id="add-point-btn" class="btn">
            <span class="material-icons">add_location</span>
            Add Point
          </button>
        </div>
      </div>
      
      <div id="loading-indicator" class="loading-indicator">
        <p>Loading map data...</p>
      </div>
      
      <div id="map-container" class="map-container"></div>
      
      <div class="attribution">
        <button id="show-attribution" class="btn-secondary">View Map Attribution</button>
      </div>
    </div>
    
    <!-- Add point panel -->
    <div id="add-point-panel" class="add-point-panel hidden">
      <div class="add-point-container">
        <div class="add-point-header">
          <h3>Add Map Point</h3>
          <button id="close-add-point" class="add-point-close">&times;</button>
        </div>
        
        <form id="add-point-form">
          <div class="form-row">
            <label for="point-title">Title:</label>
            <input type="text" id="point-title" name="title" required>
          </div>
          
          <div class="form-row">
            <label for="point-description">Description:</label>
            <textarea id="point-description" name="description" rows="3"></textarea>
          </div>
          
          <div class="form-row">
            <label for="point-lat">Latitude:</label>
            <input type="text" id="point-lat" name="lat" required readonly>
          </div>
          
          <div class="form-row">
            <label for="point-lng">Longitude:</label>
            <input type="text" id="point-lng" name="lng" required readonly>
          </div>
          
          <div class="form-row">
            <label for="point-type">Type:</label>
            <select id="point-type" name="type">
              <option value="location">Location</option>
              <option value="event">Event</option>
              <option value="landmark">Landmark</option>
              <option value="personal">Personal</option>
            </select>
          </div>
          
          <div class="form-row">
            <label for="point-tags">Tags (comma separated):</label>
            <input type="text" id="point-tags" name="tags" placeholder="e.g., travel, research, architecture">
          </div>
          
          <div class="form-actions">
            <button type="button" id="cancel-add-point" class="btn-secondary">Cancel</button>
            <button type="submit" class="btn">Save Point</button>
          </div>
        </form>
      </div>
    </div>
    
    <!-- Attribution modal -->
    <div id="attribution-modal" class="attribution-modal hidden">
      <div class="modal-content">
        <h3>Map Attribution</h3>
        <p>The maps on this site are powered by:</p>
        <ul>
          <li>© <a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noopener noreferrer">OpenStreetMap</a> contributors</li>
          <li>© <a href="https://leafletjs.com/" target="_blank" rel="noopener noreferrer">Leaflet</a> - An open-source JavaScript library for mobile-friendly interactive maps</li>
        </ul>
        <button id="close-attribution" class="btn close-modal">Close</button>
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>R3L:F - Relational Ephemeral Filenet</p>
      <p>Anti-algorithmic, Ephemeral by Default, Community-driven</p>
    </div>
  </footer>

  <script type="module">
    import { NavigationBar } from './js/components/navigation.js';
    import { GlobeVisualizer } from './js/globe/globe-visualizer.js';
    
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize navigation
      NavigationBar.init('map');
      
      // Initialize map
      const visualizer = new GlobeVisualizer('map-container');
      const loadingIndicator = document.getElementById('loading-indicator');
      
      initMap(visualizer, loadingIndicator);
      
      // Set up map attribution modal
      document.getElementById('show-attribution').addEventListener('click', () => {
        document.getElementById('attribution-modal').classList.remove('hidden');
      });
      
      document.getElementById('close-attribution').addEventListener('click', () => {
        document.getElementById('attribution-modal').classList.add('hidden');
      });
      
      // Check for URL parameters to see if we should auto-add a point
      const urlParams = new URLSearchParams(window.location.search);
      const action = urlParams.get('action');
      
      if (action === 'add-point') {
        // User was redirected here to add a point
        const isAuthenticated = document.cookie.includes('r3l_auth_state=true');
        if (isAuthenticated) {
          // Wait a moment for the map to fully load
          setTimeout(() => {
            // Click the add point button programmatically
            document.getElementById('add-point-btn').click();
            
            // If coordinates were provided, set them
            const lat = urlParams.get('lat');
            const lng = urlParams.get('lng');
            if (lat && lng) {
              const latNum = parseFloat(lat);
              const lngNum = parseFloat(lng);
              
              if (!isNaN(latNum) && !isNaN(lngNum)) {
                // Set values in form
                document.getElementById('point-lat').value = latNum.toFixed(6);
                document.getElementById('point-lng').value = lngNum.toFixed(6);
                
                // Pan map to location
                visualizer.map.setView([latNum, lngNum], 15);
                
                // Create a fake click event for the marker
                visualizer.onMapClick({
                  latlng: { lat: latNum, lng: lngNum }
                });
              }
            }
          }, 500);
        }
      }
    });
    
    // Initialize the map
    async function initMap(visualizer, loadingIndicator) {
      // Show loading indicator
      loadingIndicator.classList.add('active');
      
      try {
        const { loaded, error } = await visualizer.init();
        
        // Hide loading indicator
        loadingIndicator.classList.remove('active');
        
        if (!loaded) {
          console.error('Failed to load map:', error);
          document.getElementById('map-container').innerHTML = `
            <div class="error-message">
              <p>Failed to load map: ${error || 'Unknown error'}</p>
              <button id="retry-load" class="btn">Retry</button>
            </div>
          `;
          document.getElementById('retry-load')?.addEventListener('click', () => initMap(visualizer, loadingIndicator));
          return;
        }
        
        // Load data into the map
        await loadData(visualizer, loadingIndicator);
        
        // Handle filter changes
        document.getElementById('data-type').addEventListener('change', () => loadData(visualizer, loadingIndicator));
        document.getElementById('time-range').addEventListener('change', () => loadData(visualizer, loadingIndicator));
        document.getElementById('refresh-map').addEventListener('click', () => loadData(visualizer, loadingIndicator));
        
        // Handle window resize
        window.addEventListener('resize', () => visualizer.resize());
        
        // Add point functionality
        setupAddPointFeature(visualizer);
      } catch (err) {
        console.error('Error initializing map:', err);
        loadingIndicator.classList.remove('active');
      }
    }
    
    // Load data into the map
    async function loadData(visualizer, loadingIndicator) {
      visualizer.clear();
      
      const data = await fetchLocationData(loadingIndicator);
      
      // Add points
      data.points.forEach(point => visualizer.addPoint(point));
      
      // Add connections
      data.connections.forEach(connection => visualizer.addConnection(connection));
    }
    
    // Function to fetch location data from API
    async function fetchLocationData(loadingIndicator) {
      try {
        loadingIndicator.classList.add('active');
        
        // Check if user is authenticated
        const isAuthenticated = document.cookie.includes('r3l_auth_state=true');
        
        // Get the search parameters from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const lat = urlParams.get('lat');
        const lng = urlParams.get('lng');
        const radius = urlParams.get('radius') || '10';
        const dataType = document.getElementById('data-type').value;
        const timeRange = document.getElementById('time-range').value;
        
        let endpoint = '/api/search';
        let params = new URLSearchParams();
        
        // If lat/lng provided, do a location search
        if (lat && lng) {
          endpoint = '/api/search/location';
          params.append('lat', lat);
          params.append('lng', lng);
          params.append('radius', radius);
          params.append('limit', '20');
          
          // Add filters
          if (dataType !== 'all') {
            params.append('type', dataType);
          }
          
          if (timeRange !== 'all') {
            const now = Date.now();
            let timeLimit;
            
            switch (timeRange) {
              case 'recent':
                timeLimit = now - (7 * 24 * 60 * 60 * 1000); // 7 days
                break;
              case 'month':
                timeLimit = now - (30 * 24 * 60 * 60 * 1000); // 30 days
                break;
              case 'year':
                timeLimit = now - (365 * 24 * 60 * 60 * 1000); // 365 days
                break;
            }
            
            if (timeLimit) {
              params.append('date_start', timeLimit.toString());
            }
          }
        } else {
          // Otherwise do a regular search with type filter for geo-tagged content
          params.append('type', 'geo');
          params.append('limit', '20');
          
          // Add filters
          if (dataType !== 'all') {
            params.append('type', dataType);
          }
          
          if (timeRange !== 'all') {
            const now = Date.now();
            let timeLimit;
            
            switch (timeRange) {
              case 'recent':
                timeLimit = now - (7 * 24 * 60 * 60 * 1000); // 7 days
                break;
              case 'month':
                timeLimit = now - (30 * 24 * 60 * 60 * 1000); // 30 days
                break;
              case 'year':
                timeLimit = now - (365 * 24 * 60 * 60 * 1000); // 365 days
                break;
            }
            
            if (timeLimit) {
              params.append('date_start', timeLimit.toString());
            }
          }
        }
        
        let mapData = {
          points: [],
          connections: []
        };
        
        try {
          // Only attempt to fetch data if authenticated
          if (isAuthenticated) {
            console.log(`Fetching map data from ${endpoint}?${params.toString()}`);
            
            const response = await fetch(`${endpoint}?${params.toString()}`, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'same-origin' // Include cookies for auth
            });
            
            if (!response.ok) {
              console.error(`API error: ${response.status}`);
              throw new Error(`API error: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('Map API response:', data);
            
            // Process API response into map data format
            let results = [];
            
            // Handle different response formats
            if (data && data.results && Array.isArray(data.results)) {
              results = data.results;
            } else if (data && Array.isArray(data)) {
              results = data;
            }
            
            // Process location data into points
            results.forEach(item => {
              // Handle different location data formats
              const lat = item.lat || (item.location && item.location.lat);
              const lng = item.lng || (item.location && item.location.lng);
              
              // Skip items without location data
              if (!lat || !lng) {
                return;
              }
              
              mapData.points.push({
                coordinates: [lng, lat],
                properties: {
                  name: item.title || 'Untitled',
                  description: item.description || 'No description',
                  icon: getIconForContentType(item.type),
                  color: getColorForContentType(item.type)
                }
              });
            });
            
            // Generate connections between nearby points (within 100km)
            // This is a simple example - in a real app we'd use actual connection data
            const addedConnections = new Set();
            
            for (let i = 0; i < mapData.points.length; i++) {
              for (let j = i + 1; j < mapData.points.length; j++) {
                const point1 = mapData.points[i];
                const point2 = mapData.points[j];
                
                // Calculate rough distance
                const [lng1, lat1] = point1.coordinates;
                const [lng2, lat2] = point2.coordinates;
                
                const distance = calculateDistance(lat1, lng1, lat2, lng2);
                
                // If points are close enough, add a connection
                if (distance < 100) { // 100km
                  const connectionKey = `${i}-${j}`;
                  
                  if (!addedConnections.has(connectionKey)) {
                    mapData.connections.push({
                      source: point1.coordinates,
                      target: point2.coordinates,
                      properties: {
                        name: `Connection: ${point1.properties.name} - ${point2.properties.name}`,
                        description: `Distance: ${Math.round(distance)} km`,
                        color: 'var(--accent-color)'
                      }
                    });
                    
                    addedConnections.add(connectionKey);
                  }
                }
              }
            }
          } else {
            console.log('User not authenticated, using demo data');
          }
        } catch (error) {
          console.error('Error fetching data from API:', error);
        }
        
        // If no data was loaded (either not authenticated or error), use demo data
        if (mapData.points.length === 0) {
          // Only show demo data for non-authenticated users
          if (!isAuthenticated) {
            console.log('Using demo data for non-authenticated user');
            mapData = getDemoMapData();
          } else {
            console.log('No geographic data available for authenticated user');
          }
        }
        
        loadingIndicator.classList.remove('active');
        return mapData;
      } catch (error) {
        console.error('Error in fetchLocationData:', error);
        loadingIndicator.classList.remove('active');
        
        // Fallback to demo data
        return getDemoMapData();
      }
    }
    
    // Set up add point feature
    function setupAddPointFeature(visualizer) {
      const addPointBtn = document.getElementById('add-point-btn');
      const addPointPanel = document.getElementById('add-point-panel');
      const addPointForm = document.getElementById('add-point-form');
      const cancelAddPoint = document.getElementById('cancel-add-point');
      const closeAddPoint = document.getElementById('close-add-point');
      const pointLatInput = document.getElementById('point-lat');
      const pointLngInput = document.getElementById('point-lng');
      
      let tempMarker = null;
      let isAddingPoint = false;
      
      // Show add point panel
      addPointBtn.addEventListener('click', () => {
        // Check if user is authenticated
        const isAuthenticated = document.cookie.includes('r3l_auth_state=true');
        if (!isAuthenticated) {
          alert('You need to log in to add map points.');
          window.location.href = '/auth/login.html?redirect=' + encodeURIComponent(window.location.href);
          return;
        }
        
        // Show the panel
        addPointPanel.classList.remove('hidden');
        isAddingPoint = true;
        
        // Display message on the map
        visualizer.setMessage('Click on the map to set a location for your point');
        
        // Listen for map clicks
        visualizer.map.on('click', handleMapClick);
      });
      
      // Handle map click
      function handleMapClick(e) {
        if (!isAddingPoint) return;
        
        const { lat, lng } = e.latlng;
        
        // Update form fields
        pointLatInput.value = lat.toFixed(6);
        pointLngInput.value = lng.toFixed(6);
        
        // Add temporary marker
        if (tempMarker) {
          visualizer.removeMarker(tempMarker);
        }
        
        tempMarker = visualizer.addTempMarker([lng, lat], { name: 'New Point' });
      }
      
      // Close add point panel
      function closeAddPointPanel() {
        addPointPanel.classList.add('hidden');
        
        // Clean up
        visualizer.map.off('click', handleMapClick);
        visualizer.clearMessage();
        
        if (tempMarker) {
          visualizer.removeMarker(tempMarker);
          tempMarker = null;
        }
        
        isAddingPoint = false;
      }
      
      cancelAddPoint.addEventListener('click', closeAddPointPanel);
      closeAddPoint.addEventListener('click', closeAddPointPanel);
      
      // Handle form submission
      addPointForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!pointLatInput.value || !pointLngInput.value) {
          alert('Please click on the map to set a location.');
          return;
        }
        
        // Get form data
        const formData = new FormData(addPointForm);
        const pointData = {
          title: formData.get('title'),
          description: formData.get('description'),
          lat: parseFloat(formData.get('lat')),
          lng: parseFloat(formData.get('lng')),
          type: formData.get('type'),
          tags: formData.get('tags')?.split(',').map(tag => tag.trim()) || []
        };
        
        try {
          const response = await fetch('/api/globe/points', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(pointData),
            credentials: 'same-origin'
          });
          
          if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
          }
          
          const result = await response.json();
          console.log('Point added successfully:', result);
          
          alert('Point added successfully!');
          
          // Close panel and reset form
          addPointPanel.classList.add('hidden');
          addPointForm.reset();
          isAddingPoint = false;
          
          // Clear message
          visualizer.clearMessage();
          
          // Reload data to show the new point
          const loadingIndicator = document.getElementById('loading-indicator');
          await loadData(visualizer, loadingIndicator);
        } catch (error) {
          console.error('Error adding map point:', error);
          alert('Failed to add map point. Please try again.');
        }
      });
    }
    
    // Get demo map data for non-authenticated users
    function getDemoMapData() {
      return {
        points: [
          {
            coordinates: [-74.0060, 40.7128],
            properties: {
              name: 'New York',
              description: 'Research data on urban planning',
              icon: 'document',
              color: 'var(--accent-color)'
            }
          },
          {
            coordinates: [-118.2437, 34.0522],
            properties: {
              name: 'Los Angeles',
              description: 'Climate change impact study',
              icon: 'document',
              color: 'var(--accent-color)'
            }
          },
          {
            coordinates: [-0.1278, 51.5074],
            properties: {
              name: 'London',
              description: 'Historical architecture analysis',
              icon: 'document',
              color: 'var(--accent-color)'
            }
          },
          {
            coordinates: [2.3522, 48.8566],
            properties: {
              name: 'Paris',
              description: 'Social dynamics research',
              icon: 'document',
              color: 'var(--accent-color)'
            }
          },
          {
            coordinates: [139.6503, 35.6762],
            properties: {
              name: 'Tokyo',
              description: 'Urban transportation efficiency',
              icon: 'document',
              color: 'var(--accent-color)'
            }
          }
        ],
        connections: [
          {
            source: [-74.0060, 40.7128],
            target: [-0.1278, 51.5074],
            properties: {
              name: 'New York - London Connection',
              description: 'Research collaboration',
              color: 'var(--accent-color)'
            }
          },
          {
            source: [-0.1278, 51.5074],
            target: [2.3522, 48.8566],
            properties: {
              name: 'London - Paris Connection',
              description: 'European research network',
              color: 'var(--accent-color)'
            }
          }
        ]
      };
    }
    
    // Helper function to calculate distance between two coordinates in km
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radius of the earth in km
      const dLat = deg2rad(lat2 - lat1);
      const dLon = deg2rad(lon2 - lon1);
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLon/2) * Math.sin(dLon/2)
      ; 
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
      const d = R * c; // Distance in km
      return d;
    }
    
    function deg2rad(deg) {
      return deg * (Math.PI/180);
    }
    
    // Get icon for content type
    function getIconForContentType(type) {
      switch (type) {
        case 'document':
          return 'description';
        case 'image':
          return 'image';
        case 'audio':
          return 'music_note';
        case 'video':
          return 'videocam';
        case 'location':
          return 'place';
        case 'event':
          return 'event';
        case 'landmark':
          return 'public';
        case 'personal':
          return 'person';
        default:
          return 'public';
      }
    }
    
    // Get color for content type
    function getColorForContentType(type) {
      switch (type) {
        case 'document':
          return 'var(--accent-blue)';
        case 'image':
          return 'var(--accent-purple)';
        case 'audio':
          return 'var(--accent-green)';
        case 'video':
          return 'var(--accent-red)';
        case 'location':
          return 'var(--accent-blue)';
        case 'event':
          return 'var(--accent-green)';
        case 'landmark':
          return 'var(--accent-purple)';
        case 'personal':
          return 'var(--accent-color)';
        default:
          return 'var(--accent-color)';
      }
    }
  </script>
</body>
</html>
