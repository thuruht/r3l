// This file was archived to /archive/legacy-oauth/src/router.ts.bak.1753151763
// Original content preserved in the archive. Remove this placeholder when ready.

// ARCHIVE NOTICE
// This file was archived to /archive/legacy-fixed/src/router.ts.bak.1753151763
// The original implementation has been preserved there. Replace this
// placeholder only if you intend to restore or refactor the original.

export const ARCHIVE_NOTICE = 'moved to archive/legacy-fixed/src/router.ts.bak.1753151763';

export default ARCHIVE_NOTICE;
// End of archived content
import { Env } from './types/env';
import { UserHandler } from './handlers/user';
import { AuthHandler } from './handlers/auth';
import { ContentHandler } from './handlers/content';
import { DrawerHandler } from './handlers/drawer';
import { AssociationHandler } from './handlers/associations';
import { SearchHandler } from './handlers/search';
import { ContentLifecycle } from './handlers/expiration';
import { RandomDrawerHandler } from './handlers/random-drawer';
import { ContentCopyHandler } from './handlers/content-copy';
import { TagHandler } from './handlers/tag';

export class Router {
  userHandler: UserHandler;
  authHandler: AuthHandler;
  contentHandler: ContentHandler;
  drawerHandler: DrawerHandler;
  associationHandler: AssociationHandler;
  searchHandler: SearchHandler;
  contentLifecycle: ContentLifecycle;
  randomDrawerHandler: RandomDrawerHandler;
  tagHandler: TagHandler;

  constructor() {
    this.userHandler = new UserHandler();
    this.authHandler = new AuthHandler();
    this.contentHandler = new ContentHandler();
    this.drawerHandler = new DrawerHandler();
    this.associationHandler = new AssociationHandler();
    this.searchHandler = new SearchHandler();
    this.contentLifecycle = new ContentLifecycle();
    this.randomDrawerHandler = new RandomDrawerHandler();
    this.tagHandler = new TagHandler();
  }

  /**
   * Route an API request to the appropriate handler
   * @param request The incoming request
   * @param env Environment bindings
   * @returns Response object
   */
  async route(request: Request, env: Env): Promise<Response> {
    const url = new URL(request.url);
    const path = url.pathname;

    // CORS preflight
    if (request.method === 'OPTIONS') {
      return this.handleCors();
    }

    // Handle ORCID and GitHub callback paths - redirect to dedicated callback pages
    if (path === '/auth/orcid/callback' && request.method === 'GET') {
      // Redirect to the ORCID callback page with the same query parameters
      const orcidCallbackUrl = `${url.origin}/auth/orcid/callback/index.html${url.search}`;
      return Response.redirect(orcidCallbackUrl, 302);
    }

    if (path === '/auth/github/callback' && request.method === 'GET') {
      // Redirect to the GitHub callback page with the same query parameters
      const githubCallbackUrl = `${url.origin}/auth/github/callback/index.html${url.search}`;
      return Response.redirect(githubCallbackUrl, 302);
    }

    try {
      // Authentication endpoints
      if (path.startsWith('/api/auth')) {
        return await this.handleAuthRoutes(request, env, path);
      }

      // User endpoints
      if (path.startsWith('/api/users')) {
        return await this.handleUserRoutes(request, env, path);
      }

      // Content endpoints
      if (path.startsWith('/api/content')) {
        return await this.handleContentRoutes(request, env, path);
      }

      // Drawer endpoints
      if (path.startsWith('/api/drawers')) {
        return await this.handleDrawerRoutes(request, env, path);
      }

      // Association endpoints
      if (path.startsWith('/api/associations')) {
        return await this.handleAssociationRoutes(request, env, path);
      }

      // Search endpoints
      if (path.startsWith('/api/search')) {
        return await this.handleSearchRoutes(request, env, path);
      }

      // Scheduled tasks
      if (path === '/api/tasks/process-expirations' && request.method === 'POST') {
        await this.contentLifecycle.processExpirations(env);
        return this.jsonResponse({ success: true });
      }

      // Random drawer endpoint
      if (path === '/api/random-drawer' && request.method === 'GET') {
        return await this.randomDrawerHandler.getRandomDrawer(request, env);
      }

      // Debug endpoint to check env bindings - REMOVE IN PRODUCTION
      if (path === '/api/debug/env-check' && request.method === 'GET') {
        const envStatus = {
          r3l_db: !!env.R3L_DB,
          oauth_provider: !!env.OAUTH_PROVIDER,
          orcid_client_id: !!env.ORCID_CLIENT_ID,
          orcid_client_secret: !!env.ORCID_CLIENT_SECRET,
          github_client_id: !!env.GITHUB_CLIENT_ID,
          github_client_secret: !!env.GITHUB_CLIENT_SECRET,
          oauth_kv: !!env.OAUTH_KV,
          r3l_sessions: !!env.R3L_SESSIONS
        };

        return this.jsonResponse({ status: 'Environment check', envStatus });
      }

      // Default route for static assets
      return this.notFoundResponse();

    } catch (error) {
      console.error('Router error:', error);
      return this.errorResponse(error instanceof Error ? error.message : 'Unknown error');
    }
  }

  /**
   * Handle authentication routes
   */
  private async handleAuthRoutes(request: Request, env: Env, path: string): Promise<Response> {
    // Initialize ORCID auth
    if (path === '/api/auth/orcid/init' && request.method === 'GET') {
      const requestUrl = new URL(request.url);
      const redirectUri = env.ORCID_REDIRECT_URI || `${requestUrl.origin}/auth/orcid/callback`;
      const authUrl = this.authHandler.initOrcidAuth(redirectUri, env);
      return this.jsonResponse({ authorizationUrl: authUrl });
    }

    // Initialize GitHub auth
    if (path === '/api/auth/github/init' && request.method === 'GET') {
      const requestUrl = new URL(request.url);
      const redirectUri = env.GITHUB_REDIRECT_URI || `${requestUrl.origin}/auth/github/callback`;
      const authUrl = this.authHandler.initGitHubAuth(redirectUri, env);
      return this.jsonResponse({ authorizationUrl: authUrl });
    }

    // Complete ORCID auth
    if (path === '/api/auth/orcid/callback' && request.method === 'GET') {
      const requestUrl = new URL(request.url);
      const urlParams = requestUrl.searchParams;
      const code = urlParams.get('code');

      if (!code) {
        return this.errorResponse('Missing code parameter');
      }

      const userAgent = request.headers.get('User-Agent') || '';
      const ipAddress = request.headers.get('CF-Connecting-IP') || '';
      const redirectUri = env.ORCID_REDIRECT_URI || `${requestUrl.origin}/auth/orcid/callback`;

      try {
        const authResult = await this.authHandler.completeOrcidAuth(
          code,
          redirectUri,
          userAgent,
          ipAddress,
          env
        );

        // For API requests from the SPA, return JSON
        if (request.headers.get('Accept')?.includes('application/json')) {
          return this.jsonResponse({
            success: true,
            token: authResult.token,
            redirectUrl: '/'
          });
        }

        // For direct browser requests, set cookies and redirect
        const headers = new Headers({
          'Location': '/',
          'Set-Cookie': `r3l_session=${authResult.token}; HttpOnly; Path=/; Max-Age=2592000; SameSite=Lax`
        });

        // Add a secondary cookie that's accessible to JavaScript just to indicate auth state
        // This doesn't contain the actual token, just a flag that user is logged in
        headers.append('Set-Cookie', `r3l_auth_state=true; Path=/; Max-Age=2592000; SameSite=Lax`);

        // Add CORS headers
        headers.set('Access-Control-Allow-Origin', requestUrl.origin);
        headers.set('Access-Control-Allow-Credentials', 'true');

        return new Response(null, {
          status: 302,
          headers
        });
      } catch (error) {
        console.error('ORCID auth error:', error);

        // For API requests from the SPA, return JSON error
        if (request.headers.get('Accept')?.includes('application/json')) {
          return this.jsonResponse({
            success: false,
            message: error instanceof Error ? error.message : 'Authentication failed'
          }, 400);
        }

        // For direct browser requests, redirect
        return new Response(null, {
          status: 302,
          headers: {
            'Location': `/login?error=${encodeURIComponent('Authentication failed')}`
          }
        });
      }
    }

    // Complete GitHub auth
    if (path === '/api/auth/github/callback' && request.method === 'GET') {
      const requestUrl = new URL(request.url);
      const urlParams = requestUrl.searchParams;
      const code = urlParams.get('code');

      if (!code) {
        return this.errorResponse('Missing code parameter');
      }

      const userAgent = request.headers.get('User-Agent') || '';
      const ipAddress = request.headers.get('CF-Connecting-IP') || '';
      const redirectUri = env.GITHUB_REDIRECT_URI || `${requestUrl.origin}/auth/github/callback`;

      try {
        const authResult = await this.authHandler.completeGitHubAuth(
          code,
          redirectUri,
          userAgent,
          ipAddress,
          env
        );

        // For API requests from the SPA, return JSON
        if (request.headers.get('Accept')?.includes('application/json')) {
          return this.jsonResponse({
            success: true,
            token: authResult.token,
            redirectUrl: '/'
          });
        }

        // For direct browser requests, set cookies and redirect
        const headers = new Headers({
          'Location': '/',
          'Set-Cookie': `r3l_session=${authResult.token}; HttpOnly; Path=/; Max-Age=2592000; SameSite=Lax`
        });

        // Add a secondary cookie that's accessible to JavaScript just to indicate auth state
        // This doesn't contain the actual token, just a flag that user is logged in
        headers.append('Set-Cookie', `r3l_auth_state=true; Path=/; Max-Age=2592000; SameSite=Lax`);

        // Add CORS headers
        headers.set('Access-Control-Allow-Origin', requestUrl.origin);
        headers.set('Access-Control-Allow-Credentials', 'true');

        return new Response(null, {
          status: 302,
          headers
        });
      } catch (error) {
        console.error('GitHub auth error:', error);

        // For API requests from the SPA, return JSON error
        if (request.headers.get('Accept')?.includes('application/json')) {
          return this.jsonResponse({
            success: false,
            message: error instanceof Error ? error.message : 'Authentication failed'
          }, 400);
        }

        // For direct browser requests, redirect
        return new Response(null, {
          status: 302,
          headers: {
            'Location': `/login?error=${encodeURIComponent('Authentication failed')}`
          }
        });
      }
    }

    // Validate token
    if (path === '/api/auth/validate' && request.method === 'GET') {
      // Check for token in auth header or cookies
      const token = this.getAuthToken(request);

      if (!token) {
        console.log('Validate endpoint - missing token, cookies:', request.headers.get('Cookie'));
        return this.errorResponse('Missing authentication token', 401);
      }

      console.log('Validate endpoint - token found, validating:', token.slice(0, 10) + '...');
      const userId = await this.authHandler.validateToken(token, env);

      if (!userId) {
        console.log('Validate endpoint - invalid token');
        return this.errorResponse('Invalid or expired token', 401);
      }

      console.log('Validate endpoint - valid token, getting user:', userId);
      const user = await this.userHandler.getUser(userId, env);

      // Set CORS headers for credentials
      const headers = new Headers({
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Credentials': 'true'
      });

      return this.jsonResponse({ valid: true, user }, 200, headers);
    }

    // Refresh session
    if (path === '/api/auth/refresh' && request.method === 'POST') {
      const token = this.getAuthToken(request);
      if (!token) {
        return this.errorResponse('Missing authentication token', 401);
      }

      const newExpiresAt = await this.authHandler.refreshSession(token, env);
      if (!newExpiresAt) {
        return this.errorResponse('Invalid or expired token', 401);
      }

      return this.jsonResponse({ success: true, expires_at: newExpiresAt });
    }

    // Logout
    if (path === '/api/auth/logout' && request.method === 'POST') {
      const token = this.getAuthToken(request);
      if (token) {
        await this.authHandler.endSession(token, env);
      }

      // Get the domain from the request URL
      const domain = new URL(request.url).hostname;
      const isLocalhost = domain === 'localhost';

      const cookieOptions = isLocalhost
        ? `HttpOnly; Path=/; Max-Age=0; SameSite=Lax`
        : `HttpOnly; Path=/; Domain=${domain}; Max-Age=0; SameSite=Lax; Secure`;

      const authStateCookieOptions = isLocalhost
        ? `Path=/; Max-Age=0; SameSite=Lax`
        : `Path=/; Domain=${domain}; Max-Age=0; SameSite=Lax; Secure`;

      // Clear both cookies
      const headers = new Headers({
        'Set-Cookie': `r3l_session=; ${cookieOptions}`,
      });
      headers.append('Set-Cookie', `r3l_auth_state=; ${authStateCookieOptions}`);

      console.log('Clearing auth cookies with domain:', domain);

      return this.jsonResponse({ success: true }, 200, headers);
    }

    // Test cookie endpoint for debugging
    if (path === '/api/auth/test-cookies' && request.method === 'GET') {
      return this.fixAuthStateCookie(request);
    }

    // Fix auth state cookie - new dedicated endpoint
    if (path === '/api/auth/fix-cookies' && request.method === 'GET') {
      return this.fixAuthStateCookie(request);
    }

    return this.notFoundResponse();
  }

  /**
   * Handle user routes
   */
  private async handleUserRoutes(request: Request, env: Env, path: string): Promise<Response> {
    // Get authenticated user first
    const token = this.getAuthToken(request);
    let authenticatedUserId: string | null = null;

    if (token) {
      authenticatedUserId = await this.authHandler.validateToken(token, env);
    }

    // Get user profile
    if (path.match(/^\/api\/users\/[^/]+$/) && request.method === 'GET') {
      const userId = path.split('/').pop() as string;
      const user = await this.userHandler.getUser(userId, env);

      if (!user) {
        return this.errorResponse('User not found', 404);
      }

      return this.jsonResponse(user);
    }

    // Update user profile - requires authentication
    if (path.match(/^\/api\/users\/[^/]+$/) && request.method === 'PATCH') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const userId = path.split('/').pop() as string;

      if (authenticatedUserId !== userId) {
        return this.errorResponse('Unauthorized', 403);
      }

      const data = await request.json() as any;
      await this.userHandler.updateUserProfile(userId, data, env);

      return this.jsonResponse({ success: true });
    }

    // Update user preferences - requires authentication
    if (path.match(/^\/api\/users\/[^/]+\/preferences$/) && request.method === 'PATCH') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const userId = path.split('/')[3];

      if (authenticatedUserId !== userId) {
        return this.errorResponse('Unauthorized', 403);
      }

      const data = await request.json() as any;
      await this.userHandler.updateUserPreferences(userId, data, env);

      return this.jsonResponse({ success: true });
    }

    // Get user notifications - requires authentication
    if (path.match(/^\/api\/users\/[^/]+\/notifications$/) && request.method === 'GET') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const userId = path.split('/')[3];

      if (authenticatedUserId !== userId) {
        return this.errorResponse('Unauthorized', 403);
      }

      const url = new URL(request.url);
      const limit = parseInt(url.searchParams.get('limit') || '20');
      const offset = parseInt(url.searchParams.get('offset') || '0');

      const notifications = await this.userHandler.getUserNotifications(userId, limit, offset, env);
      return this.jsonResponse(notifications);
    }

    // Mark notifications as read - requires authentication
    if (path.match(/^\/api\/users\/[^/]+\/notifications\/read$/) && request.method === 'POST') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const userId = path.split('/')[3];

      if (authenticatedUserId !== userId) {
        return this.errorResponse('Unauthorized', 403);
      }

      const data = await request.json() as { ids: string[] };
      if (!Array.isArray(data.ids)) {
        return this.errorResponse('Invalid request body');
      }

      await this.userHandler.markNotificationsAsRead(userId, data.ids, env);
      return this.jsonResponse({ success: true });
    }

    // Get user files
    if (path.match(/^\/api\/users\/[^/]+\/files$/) && request.method === 'GET') {
      const userId = path.split('/')[3];

      // Only allow authenticated user to see their own files
      if (authenticatedUserId !== userId) {
        return this.errorResponse('Unauthorized', 403);
      }

      const url = new URL(request.url);
      const filter = url.searchParams.get('filter') || 'all';
      const limit = parseInt(url.searchParams.get('limit') || '100');
      const offset = parseInt(url.searchParams.get('offset') || '0');

      try {
        // Query DB for user files
        let query = `
          SELECT * FROM content
          WHERE user_id = ?
        `;

        const params = [userId];

        // Apply filter
        switch (filter) {
          case 'public':
            query += ' AND is_public = 1';
            break;
          case 'private':
            query += ' AND is_public = 0';
            break;
          case 'expiring':
            query += ' AND expires_at IS NOT NULL AND expires_at < ? AND is_archived = 0';
            params.push((Date.now() + (2 * 24 * 60 * 60 * 1000)).toString()); // 2 days from now
            break;
          case 'archived':
            query += ' AND is_archived = 1';
            break;
        }

        query += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';
        params.push(limit.toString(), offset.toString());

        const result = await env.R3L_DB.prepare(query).bind(...params).all();
        const files = result.results || [];

        return this.jsonResponse({ files });
      } catch (error) {
        console.error('Error fetching user files:', error);
        return this.errorResponse('Failed to fetch files');
      }
    }

    // Get user stats - requires authentication for private stats
    if (path.match(/^\/api\/users\/[^/]+\/stats$/) && request.method === 'GET') {
      const userId = path.split('/')[3];

      // Only allow authenticated user to see their own stats
      if (authenticatedUserId !== userId) {
        return this.errorResponse('Unauthorized', 403);
      }

      try {
        // Get total files count
        const totalFilesResult = await env.R3L_DB.prepare(`
          SELECT COUNT(*) as count FROM content WHERE user_id = ?
        `).bind(userId).first<{count: number}>();

        // Get archived files count
        const archivedFilesResult = await env.R3L_DB.prepare(`
          SELECT COUNT(*) as count FROM content WHERE user_id = ? AND is_archived = 1
        `).bind(userId).first<{count: number}>();

        // Get connections count (this is a placeholder - implement based on your connections schema)
        const connectionsResult = await env.R3L_DB.prepare(`
          SELECT COUNT(*) as count FROM connections WHERE user_id = ? OR connected_user_id = ?
        `).bind(userId, userId).first<{count: number}>();

        const stats = {
          total_files: totalFilesResult?.count || 0,
          archived_files: archivedFilesResult?.count || 0,
          connections: connectionsResult?.count || 0
        };

        return this.jsonResponse(stats);
      } catch (error) {
        console.error('Error fetching user stats:', error);
        return this.errorResponse('Failed to fetch user stats');
      }
    }

    return this.notFoundResponse();
  }

  /**
   * Handle content routes
   */
  private async handleContentRoutes(request: Request, env: Env, path: string): Promise<Response> {
    // Get authenticated user first
    const token = this.getAuthToken(request);
    let authenticatedUserId: string | null = null;

    if (token) {
      authenticatedUserId = await this.authHandler.validateToken(token, env);
    }

    // Handle content copy
    if (path === '/api/content/copy' && request.method === 'POST') {
      // Attach user auth info to request
      (request as any).authenticated = !!authenticatedUserId;
      (request as any).userId = authenticatedUserId;

      const contentCopyHandler = new ContentCopyHandler();
      return await contentCopyHandler.handleCopyContent(request as any, env);
    }

    // Handle explicit voting
    if (path === '/api/content/vote' && request.method === 'POST') {
      // Attach user auth info to request
      (request as any).authenticated = !!authenticatedUserId;
      (request as any).userId = authenticatedUserId;

      const contentCopyHandler = new ContentCopyHandler();
      return await contentCopyHandler.handleExplicitVote(request as any, env);
    }

    // Handle content download
    if (path.startsWith('/api/content/download/') && request.method === 'GET') {
      // Attach user auth info to request
      (request as any).authenticated = !!authenticatedUserId;
      (request as any).userId = authenticatedUserId;

      const contentCopyHandler = new ContentCopyHandler();
      return await contentCopyHandler.handleDownloadContent(request as any, env);
    }

    // Handle tag management - add tags
    if (path.match(/^\/api\/content\/[^/]+\/tags$/) && request.method === 'POST') {
      // Require authentication
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const contentId = path.split('/')[3];
      const data = await request.json() as { tags: string[] };

      if (!Array.isArray(data.tags)) {
        return this.errorResponse('Invalid tags format');
      }

      await this.tagHandler.addTags(contentId, data.tags, env);
      return this.jsonResponse({ success: true });
    }

    // Handle tag management - remove tags
    if (path.match(/^\/api\/content\/[^/]+\/tags$/) && request.method === 'DELETE') {
      // Require authentication
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const contentId = path.split('/')[3];
      const data = await request.json() as { tags: string[] };

      if (!Array.isArray(data.tags)) {
        return this.errorResponse('Invalid tags format');
      }

      await this.tagHandler.removeTags(contentId, data.tags, env);
      return this.jsonResponse({ success: true });
    }

    // Handle tag management - get content tags
    if (path.match(/^\/api\/content\/[^/]+\/tags$/) && request.method === 'GET') {
      const contentId = path.split('/')[3];
      const tags = await this.tagHandler.getContentTags(contentId, env);
      return this.jsonResponse({ tags });
    }

    return this.notFoundResponse();
  }

  /**
   * Handle drawer routes
   */
  private async handleDrawerRoutes(request: Request, env: Env, path: string): Promise<Response> {
    // Get authenticated user first
    const token = this.getAuthToken(request);
    let authenticatedUserId: string | null = null;

    if (token) {
      authenticatedUserId = await this.authHandler.validateToken(token, env);
    }

    // Get user drawers
    if (path === '/api/drawers/user' && request.method === 'GET') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const drawers = await this.drawerHandler.getUserDrawers(authenticatedUserId, env);
      return this.jsonResponse(drawers);
    }

    // Get drawer details
    if (path.match(/^\/api\/drawers\/[^/]+$/) && request.method === 'GET') {
      const drawerId = path.split('/').pop() as string;
      const drawer = await this.drawerHandler.getDrawer(drawerId, env);

      if (!drawer) {
        return this.errorResponse('Drawer not found', 404);
      }

      // If drawer is private, check authentication
      if (!drawer.is_public && (!authenticatedUserId || authenticatedUserId !== drawer.user_id)) {
        return this.errorResponse('Unauthorized', 403);
      }

      return this.jsonResponse(drawer);
    }

    // Get drawer contents
    if (path.match(/^\/api\/drawers\/[^/]+\/contents$/) && request.method === 'GET') {
      const drawerId = path.split('/')[3];
      const drawer = await this.drawerHandler.getDrawer(drawerId, env);

      if (!drawer) {
        return this.errorResponse('Drawer not found', 404);
      }

      // If drawer is private, check authentication
      if (!drawer.is_public && (!authenticatedUserId || authenticatedUserId !== drawer.user_id)) {
        return this.errorResponse('Unauthorized', 403);
      }

      const contents = await this.drawerHandler.getDrawerContents(drawerId, env);
      return this.jsonResponse(contents);
    }

    // Create new drawer
    if (path === '/api/drawers' && request.method === 'POST') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const data = await request.json() as any;
      const { name, description, isPublic } = data;

      if (!name) {
        return this.errorResponse('Name is required');
      }

      const drawerId = await this.drawerHandler.createDrawer(
        authenticatedUserId,
        name,
        description || '',
        isPublic !== false,
        env
      );

      return this.jsonResponse({ id: drawerId });
    }

    // Update drawer
    if (path.match(/^\/api\/drawers\/[^/]+$/) && request.method === 'PATCH') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const drawerId = path.split('/').pop() as string;
      const drawer = await this.drawerHandler.getDrawer(drawerId, env);

      if (!drawer) {
        return this.errorResponse('Drawer not found', 404);
      }

      // Check ownership
      if (drawer.user_id !== authenticatedUserId) {
        return this.errorResponse('Unauthorized', 403);
      }

      const data = await request.json() as any;
      await this.drawerHandler.updateDrawer(drawerId, data, env);

      return this.jsonResponse({ success: true });
    }

    // Delete drawer
    if (path.match(/^\/api\/drawers\/[^/]+$/) && request.method === 'DELETE') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const drawerId = path.split('/').pop() as string;

      try {
        await this.drawerHandler.deleteDrawer(drawerId, authenticatedUserId, env);
        return this.jsonResponse({ success: true });
      } catch (error) {
        if (error instanceof Error && error.message.includes('Unauthorized')) {
          return this.errorResponse('Unauthorized', 403);
        }
        if (error instanceof Error && error.message.includes('not found')) {
          return this.errorResponse('Drawer not found', 404);
        }
        throw error;
      }
    }

    // Add content to drawer
    if (path.match(/^\/api\/drawers\/[^/]+\/contents$/) && request.method === 'POST') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const drawerId = path.split('/')[3];
      const data = await request.json() as any;
      const { contentId, note } = data;

      if (!contentId) {
        return this.errorResponse('Content ID is required');
      }

      try {
        const drawerContentId = await this.drawerHandler.addContentToDrawer(
          drawerId,
          contentId,
          note || '',
          authenticatedUserId,
          env
        );

        return this.jsonResponse({ id: drawerContentId });
      } catch (error) {
        if (error instanceof Error && error.message.includes('Unauthorized')) {
          return this.errorResponse('Unauthorized', 403);
        }
        if (error instanceof Error && error.message.includes('not found')) {
          return this.errorResponse('Drawer not found', 404);
        }
        if (error instanceof Error && error.message.includes('already in drawer')) {
          return this.errorResponse('Content already in drawer', 400);
        }
        throw error;
      }
    }

    // Remove content from drawer
    if (path.match(/^\/api\/drawers\/[^/]+\/contents\/[^/]+$/) && request.method === 'DELETE') {
      if (!authenticatedUserId) {
        return this.errorResponse('Authentication required', 401);
      }

      const drawerId = path.split('/')[3];
      const contentId = path.split('/')[5];

      try {
        await this.drawerHandler.removeContentFromDrawer(
          drawerId,
          contentId,
          authenticatedUserId,
          env
        );

        return this.jsonResponse({ success: true });
      } catch (error) {
        if (error instanceof Error && error.message.includes('Unauthorized')) {
          return this.errorResponse('Unauthorized', 403);
        }
        if (error instanceof Error && error.message.includes('not found')) {
          return this.errorResponse('Drawer not found', 404);
        }
        throw error;
      }
    }

    return this.notFoundResponse();
  }

  /**
   * Handle association routes
   */
  private async handleAssociationRoutes(_request: Request, _env: Env, _path: string): Promise<Response> {
    // Implement association routes
    return this.notFoundResponse();
  }

  /**
   * Handle search routes
   */
  private async handleSearchRoutes(request: Request, env: Env, path: string): Promise<Response> {
    // Basic search
    if (path === '/api/search' && request.method === 'GET') {
      const url = new URL(request.url);
      const query = url.searchParams.get('q') || '';
      const limit = parseInt(url.searchParams.get('limit') || '20');
      const offset = parseInt(url.searchParams.get('offset') || '0');

      // Parse filters
      const type = url.searchParams.getAll('type');
      const dateStart = url.searchParams.get('date_start');
      const dateEnd = url.searchParams.get('date_end');

      const filters: any = {};
      if (type.length > 0) filters.type = type;
      if (dateStart || dateEnd) {
        filters.dateRange = {};
        if (dateStart) filters.dateRange.start = parseInt(dateStart);
        if (dateEnd) filters.dateRange.end = parseInt(dateEnd);
      }

      // Get user ID for visibility filtering
      const token = this.getAuthToken(request);
      let userId = null;
      if (token) {
        userId = await this.authHandler.validateToken(token, env);
        if (userId) {
          filters.userId = userId;
          filters.visibility = 'both';
        }
      }

      const results = await this.searchHandler.basicSearch(query, filters, limit, offset, env);
      return this.jsonResponse(results);
    }

    // Lurker search (randomized)
    if (path === '/api/search/lurker' && request.method === 'GET') {
      const url = new URL(request.url);
      const query = url.searchParams.get('q') || '';
      const randomness = parseInt(url.searchParams.get('randomness') || '50');
      const limit = parseInt(url.searchParams.get('limit') || '20');

      // Parse filters
      const type = url.searchParams.getAll('type');
      const dateStart = url.searchParams.get('date_start');
      const dateEnd = url.searchParams.get('date_end');

      const filters: any = {};
      if (type.length > 0) filters.type = type;
      if (dateStart || dateEnd) {
        filters.dateRange = {};
        if (dateStart) filters.dateRange.start = parseInt(dateStart);
        if (dateEnd) filters.dateRange.end = parseInt(dateEnd);
      }

      const results = await this.searchHandler.lurkerSearch(query, randomness, filters, limit, env);
      return this.jsonResponse(results);
    }

    // Location-based search
    if (path === '/api/search/location' && request.method === 'GET') {
      const url = new URL(request.url);
      const lat = parseFloat(url.searchParams.get('lat') || '0');
      const lng = parseFloat(url.searchParams.get('lng') || '0');
      const radius = parseFloat(url.searchParams.get('radius') || '5');
      const limit = parseInt(url.searchParams.get('limit') || '20');

      // Validate coordinates
      if (isNaN(lat) || isNaN(lng) || lat === 0 && lng === 0) {
        return this.errorResponse('Invalid coordinates');
      }

      // Get location-based results
      const results = await this.searchHandler.locationSearch(lat, lng, radius, limit, env);
      return this.jsonResponse(results);
    }

    // Popular tags
    if (path === '/api/search/tags' && request.method === 'GET') {
      const url = new URL(request.url);
      const limit = parseInt(url.searchParams.get('limit') || '30');

      const popularTags = await this.tagHandler.getPopularTags(limit, env);
      return this.jsonResponse(popularTags);
    }

    return this.notFoundResponse();
  }

  /**
   * Extract authentication token from request
   */
  /**
   * Get authentication token from request
   * @param request The request object
   * @returns The token if found, null otherwise
   */
  private getAuthToken(request: Request): string | null {
    // Check Authorization header first
    const authHeader = request.headers.get('Authorization');
    if (authHeader && authHeader.startsWith('Bearer ')) {
      return authHeader.slice(7);
    }

    // Check for token in cookie if not in header
    const cookieHeader = request.headers.get('Cookie');
    if (cookieHeader) {
      const match = cookieHeader.match(/r3l_session=([^;]+)/);
      if (match) {
        return match[1];
      }
    }

    return null;
  }

  /**
   * Fix auth state cookie
   */
  private fixAuthStateCookie(request: Request): Response {
    const url = new URL(request.url);

    // Get the domain from the request URL
    const domain = url.hostname;
    const isLocalhost = domain === 'localhost';

    // Create auth state cookie that's accessible to JavaScript
    const cookieOptions = isLocalhost
      ? `Path=/; Max-Age=2592000; SameSite=Lax`
      : `Path=/; Max-Age=2592000; SameSite=Lax; Secure`;

    const headers = new Headers({
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': url.origin,
      'Access-Control-Allow-Credentials': 'true',
      'Set-Cookie': `r3l_auth_state=true; ${cookieOptions}`
    });

    console.log('Setting auth state cookie:', `r3l_auth_state=true; ${cookieOptions}`);

    return new Response(JSON.stringify({
      success: true,
      message: 'Auth state cookie fixed'
    }), {
      status: 200,
      headers
    });
  }

  /**
   * Create a JSON response
   */
  private jsonResponse(data: any, status: number = 200, customHeaders?: Headers): Response {
    const headers = customHeaders || new Headers({
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      'Access-Control-Allow-Credentials': 'true'
    });

    // Ensure Content-Type is set
    if (!headers.has('Content-Type')) {
      headers.set('Content-Type', 'application/json');
    }

    return new Response(JSON.stringify(data), {
      status,
      headers
    });
  }

  /**
   * Create an error response
   */
  private errorResponse(message: string, status: number = 400): Response {
    return this.jsonResponse({ error: message }, status);
  }

  /**
   * Create a not found response
   */
  private notFoundResponse(): Response {
    return this.errorResponse('Not found', 404);
  }

  /**
   * Handle CORS preflight requests
   */
  /**
   * Handle CORS preflight requests
   */
  private handleCors(): Response {
    return new Response(null, {
      status: 204,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Allow-Credentials': 'true',
        'Access-Control-Max-Age': '86400'
      }
    });
  }
}
